@model InventoryApp.Models.Item

@{
    ViewBag.Title = "Edit";
}

@using (Html.BeginForm("Edit", "Items", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <div class="row">
        <div class="col-md-3">
            <div class="form-group">
                <div class="thumbnail" style="min-height: 210px;">
                    <img src="@Url.Action("Image", "Items", new { id = Model.Id })" id="imagePreview" style="max-height: 200px;">
                    <div class="caption">
                        <!-- <label class="control-label" for="inputFile">Load an image from your device.</label> -->
                        <label class="btn btn-primary btn-block">
                            <span class="glyphicon glyphicon-folder-open"></span>&nbsp;&nbsp;Browse...
                            <input id="inputFile" name="imageFile" accept="image/*" type="file" style="display: none;">
                        </label>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-9">
            <h4>Create an item</h4>
            <div class="form-horizontal">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-2">
                        @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                </div>

                <hr />

                <div class="form-group">
                    @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-2">
                        @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Threshold, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-2">
                        @Html.EditorFor(model => model.Threshold, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Threshold, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-2">
                        <div class="input-group">
                            <span class="input-group-addon">$</span>
                            @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                    </div>
                    @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Edit Item" class="btn btn-default" />
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<script>
    window.onload = function () {
        //This executes first before the 'onload' event
        imagePreview.onerror = function () {
            console.log("Problem loading image. " + imagePreview.src);
        };

        inputFile.addEventListener("change", function () {
            var file = inputFile.files[0];

            if (file == null || file == undefined) {
                //inputFilename.value = "";
                //Load default image error resource
                return;
            }

            var fileError = false;
            var image = new Image();

            image.onload = function () {
                if (!fileError) {
                    imagePreview.src = image.src;
                }
            };

            image.onerror = function () {
                fileError = true;
            };

            try {
                image.src = URL.createObjectURL(file);
                MimeType.value = file.type;
            } catch (error) {
                console.log("Error loading image from file: " + file.name);
            }

            function cancelFile() {
                imagePreview.src = "";
            }

        });
    }
</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
